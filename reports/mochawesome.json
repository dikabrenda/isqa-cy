{
  "stats": {
    "suites": 4,
    "tests": 7,
    "passes": 7,
    "pending": 0,
    "failures": 0,
    "start": "2021-06-24T12:37:23.708Z",
    "end": "2021-06-24T12:37:30.000Z",
    "duration": 6292,
    "testsRegistered": 7,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "fcd9ae16-07a7-4716-950b-6a134fa0e7f1",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9536c69b-b6a1-4842-82e7-b08dce7c51b9",
          "title": "As an Admin, I want create new user",
          "fullFile": "/Users/oimtrust/Documents/automateTApps/isqa-cy/test/scenarios/admin/create-user.test.js",
          "file": "/test/scenarios/admin/create-user.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should success create user",
              "fullTitle": "As an Admin, I want create new user Should success create user",
              "timedOut": false,
              "duration": 1123,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await AdminAPI.createUser(data.VALID_DATA_USERS);\nassert.equal(response.status, 201);\nassert.hasAllKeys(response.data, [\"name\", \"job\", \"id\", \"createdAt\"]);\nassert.isString(response.data.name);\nassert.isString(response.data.job);\nassert.isString(response.data.id);",
              "err": {},
              "uuid": "0673eb38-90df-42c0-983d-f61840c1560c",
              "parentUUID": "9536c69b-b6a1-4842-82e7-b08dce7c51b9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0673eb38-90df-42c0-983d-f61840c1560c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1123,
          "root": false,
          "rootEmpty": false,
          "_timeout": 180000
        },
        {
          "uuid": "d5902159-6d9c-46ea-8a1e-d83ab6a89d02",
          "title": "As an admin, I want to see all users have been created",
          "fullFile": "/Users/oimtrust/Documents/automateTApps/isqa-cy/test/scenarios/admin/get-all-users.test.js",
          "file": "/test/scenarios/admin/get-all-users.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should success get all users",
              "fullTitle": "As an admin, I want to see all users have been created Should success get all users",
              "timedOut": false,
              "duration": 662,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await AdminAPI.getAllUsers();\nassert.equal(response.status, 200)\nexpect(response.data).to.be.jsonSchema(schema.VALID_GET_ALL_USERS)",
              "err": {},
              "uuid": "a2f30e5b-7bd2-4a43-8294-f9fd8cfd7315",
              "parentUUID": "d5902159-6d9c-46ea-8a1e-d83ab6a89d02",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should success get all users using page and per_page as a parameter",
              "fullTitle": "As an admin, I want to see all users have been created Should success get all users using page and per_page as a parameter",
              "timedOut": false,
              "duration": 617,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const params    = getParams(data.GET_ALL_USERS_VALID_PARAMETER)\nconst response  = await AdminAPI.getAllUsersWithParams(params)\nassert.equal(response.status, 200)\nexpect(response.data).to.be.jsonSchema(schema.VALID_GET_ALL_USERS)",
              "err": {},
              "uuid": "955c3d78-d52d-4f97-8996-a05aac885c2d",
              "parentUUID": "d5902159-6d9c-46ea-8a1e-d83ab6a89d02",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a2f30e5b-7bd2-4a43-8294-f9fd8cfd7315",
            "955c3d78-d52d-4f97-8996-a05aac885c2d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1279,
          "root": false,
          "rootEmpty": false,
          "_timeout": 180000
        },
        {
          "uuid": "d4fd70f3-bd52-4e7c-9f37-65e9f5b7e8eb",
          "title": "As a user, I want to login",
          "fullFile": "/Users/oimtrust/Documents/automateTApps/isqa-cy/test/scenarios/user/login.test.js",
          "file": "/test/scenarios/user/login.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should success try to login using valid account",
              "fullTitle": "As a user, I want to login Should success try to login using valid account",
              "timedOut": false,
              "duration": 945,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await UserAPI.login(data.VALID_LOGIN);\nassert.equal(response.status, 200);\nassert.hasAllKeys(response.data, [\"token\"])\nassert.isString(response.data.token)",
              "err": {},
              "uuid": "f4038c63-5779-44b4-84c3-11e8740a9379",
              "parentUUID": "d4fd70f3-bd52-4e7c-9f37-65e9f5b7e8eb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should failed try to login using invalid account",
              "fullTitle": "As a user, I want to login Should failed try to login using invalid account",
              "timedOut": false,
              "duration": 939,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await UserAPI.login(data.INVALID_LOGIN);\nassert.equal(response.status, 400);\nassert.hasAllKeys(response.data, [\"error\"])\nassert.isString(response.data.error)",
              "err": {},
              "uuid": "aeed868a-71e2-435b-8ebe-b21680287024",
              "parentUUID": "d4fd70f3-bd52-4e7c-9f37-65e9f5b7e8eb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f4038c63-5779-44b4-84c3-11e8740a9379",
            "aeed868a-71e2-435b-8ebe-b21680287024"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1884,
          "root": false,
          "rootEmpty": false,
          "_timeout": 180000
        },
        {
          "uuid": "c5971c3a-e008-4529-872f-c9ce90d2e70c",
          "title": "As a user, I want to register",
          "fullFile": "/Users/oimtrust/Documents/automateTApps/isqa-cy/test/scenarios/user/register.test.js",
          "file": "/test/scenarios/user/register.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should successfull register new account using valid data",
              "fullTitle": "As a user, I want to register Should successfull register new account using valid data",
              "timedOut": false,
              "duration": 937,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await  UserAPI.register(data.VALID_REGISTER);\nif (response.status === 200) {\n    assert.equal(response.status, 200);\n    assert.containsAllKeys(response.data, [\"id\", \"token\"]);\n    assert.isNumber(response.data.id);\n    assert.isString(response.data.token);\n} else {\n    assert.equal(response.status, 400)\n    assert.equal(response.data.error, \"Note: Only defined users succeed registration\")\n}",
              "err": {},
              "uuid": "f7f1fcfc-821b-40d5-ba42-b1cb86216a8c",
              "parentUUID": "c5971c3a-e008-4529-872f-c9ce90d2e70c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should failed try to register using invalid data",
              "fullTitle": "As a user, I want to register Should failed try to register using invalid data",
              "timedOut": false,
              "duration": 928,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await UserAPI.register(data.INVALID_REGISTER);\nassert.equal(response.status, 400);\nassert.containsAllKeys(response.data, [\"error\"]);\nassert.isString(response.data.error);",
              "err": {},
              "uuid": "b7b090fc-ad1e-4fd5-820c-8124b2463f99",
              "parentUUID": "c5971c3a-e008-4529-872f-c9ce90d2e70c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f7f1fcfc-821b-40d5-ba42-b1cb86216a8c",
            "b7b090fc-ad1e-4fd5-820c-8124b2463f99"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1865,
          "root": false,
          "rootEmpty": false,
          "_timeout": 180000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 180000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": {
        "reportDir": "reports/"
      },
      "version": "5.2.0"
    }
  }
}